#
# Build and deploy workflow police & robocat
#
include:
- project: 'dev/ci'
  file: 'pipelines/infra-templates.yml'

variables:
  WORKFLOW_POLICE_VERSION: "1.14"
  ROBOCAT_VERSION: "2.0"
  K8S_PRODUCT_RELEASE: "prod"
  DOCKER_REGISTRY: "docker.artifactory.lan.hdw.mx:80"
  K8S_DEPLOY_NAMESPACE: "default"

stages:
  - validate
  - test
  - docker image, chart
  - deploy

pep8:
  image: nx/deploy-pod
  tags:
  - service
  stage: validate
  script:
  - pycodestyle --max-line-length=99 .
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"

robocat:test:
  image: python:3.8
  stage: test
  variables:
    ROBOCAT_DIR: bots/robocat
    PYTHONPATH: .
  script:
  - pip3 install -r $ROBOCAT_DIR/requirements.txt
  - pytest $ROBOCAT_DIR/tests/ --junitxml=./robocat_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: robocat_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - bots/robocat/**/*
    - automation_tools/**/*

workflow_police:test:
  image: python:3.8
  stage: test
  variables:
    POLICE_DIR: bots/workflow_police
    PYTHONPATH: .
  script:
  - pip3 install -r $POLICE_DIR/requirements.txt
  - pytest $POLICE_DIR/tests/ --junitxml=./police_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: police_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - bots/workflow_police/**/*
    - automation_tools/**/*

source_files_compliance:test:
  image: python:3.8
  stage: test
  variables:
    PYTHONPATH: .
  script:
  - pip3 install pytest==3.5.0
  - pytest ./nx_source_file_compliance/ --junitxml=./source_files_compliance_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: source_files_compliance_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - nx_source_file_compliance/**/*

# validate helm charts
helm:robocat:validate:
  extends: .validate.helm.chart.template
  variables:
    HELM_CHART_DIR: bots/robocat/chart

helm:workflow_police:validate:
  extends: .validate.helm.chart.template
  variables:
    HELM_CHART_DIR: bots/workflow_police/chart

# build robocat docker image
docker:build:robocat:
  extends: .docker.template
  stage: "docker image, chart"
  variables:
    DOCKER_DIR: "bots/robocat"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "nx/workflow_police/robocat"
    TARGET_IMAGE_TAG: "$ROBOCAT_VERSION"
    BUILD_OPTIONS: "--build-arg=GIT_COMMIT=$CI_COMMIT_SHORT_SHA"

# build workflow police docker image
docker:build:workflow_police:
  extends: .docker.template
  stage: "docker image, chart"
  variables:
    DOCKER_DIR: "bots/workflow_police"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "nx/workflow_police"
    TARGET_IMAGE_TAG: "$WORKFLOW_POLICE_VERSION"
    BUILD_OPTIONS: "--build-arg=GIT_COMMIT=$CI_COMMIT_SHORT_SHA"

# build robocat helm chart
helm:build:robcat:
  extends: .helm.chart.template
  stage: "docker image, chart"
  variables:
    HELM_CHART_DIR: "bots/robocat/chart"

# build workflow police helm chart
helm:build:workflow_police:
  extends: .helm.chart.template
  stage: "docker image, chart"
  variables:
    HELM_CHART_DIR: "bots/workflow_police/chart"

# deploy workflow_police
k8s:workflow_police:deploy:
  extends: .k8s.deploy.template
  variables:
    DOCKER_DIR: "bots/workflow_police"
    HELM_CHART_DIR: "$DOCKER_DIR/chart"
    PRODUCT: "workflow-police"
    PRE_SCRIPT: |
      HELM_CHART_VERSION="$(awk -F"['\"]" "/^version:/{print \$$2}" ${HELM_CHART_DIR}/Chart.yaml)";
      echo "gitSshKey: |"
        > ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml;
      vault kv get --field="workflow-robocat-ssh-private-key" "apptokens/gitlab/prod" | sed 's/^/  /'
        >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml;
      echo "jiraPassword: $(vault kv get --field="service@networkoptix.com" "apptokens/jira")"
        >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml;
      set +o pipefail;
      kubectl scale deployment ${PRODUCT}-${K8S_PRODUCT_RELEASE} --replicas=0|:
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
    changes:
    - $DOCKER_DIR/**/*
    - $HELM_CHART_DIR/**/*
    - automation_tools/**/*

# deploy robocat
k8s:robocat:deploy:
  extends: .k8s.deploy.template
  variables:
    DOCKER_DIR: "bots/robocat"
    HELM_CHART_DIR: "$DOCKER_DIR/chart"
    PRODUCT: "workflow-police-robocat"
    PRE_SCRIPT: |
      HELM_CHART_VERSION="$(awk -F"['\"]" "/^version:/{print \$$2}" ${HELM_CHART_DIR}/Chart.yaml)";
      echo "gitSshKey: |"
        > ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml;
      vault kv get --field="workflow-robocat-ssh-private-key" "apptokens/gitlab/prod" | sed 's/^/  /'
        >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml;
      echo "gitlabToken: $(vault kv get --field="workflow-police-app-token" "apptokens/gitlab/prod")"
        >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml;
      echo "jiraPassword: $(vault kv get --field="service@networkoptix.com" "apptokens/jira")"
        >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml;
      set +o pipefail;
      kubectl scale deployment ${PRODUCT}-${K8S_PRODUCT_RELEASE} --replicas=0|:
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
    changes:
    - $DOCKER_DIR/**/*
    - $HELM_CHART_DIR/**/*
    - automation_tools/**/*
