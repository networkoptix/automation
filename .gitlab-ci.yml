#
# Build and deploy workflow police & robocat
#
include:
- project: 'dev/ci'
  file: 'pipelines/infra-templates.yml'

variables:
  DOCKER_REGISTRY_MIRROR: "docker.us.nxteam.dev"
  WORKFLOW_POLICE_VERSION: "1.14"
  ROBOCAT_VERSION: "2.0"
  K8S_DEPLOY_NAMESPACE: "workflow-police"
  GELF_SERVER: "graylog.us.nxteam.dev:12201"
  WORKFLOW_POLICE_LOG_LEVEL:
    description: Workflow police log level
    value: "INFO"
  ROBOCAT_LOG_LEVEL:
    description: Robocat log level
    value: "INFO"
  BOT_GIT_REPO:
    description: 'Git repository path for the deployment configuration. Must start with a slash ("/") (e.g.: "/dev/nx")'
    value:
  ROBOCAT_GITLAB_PROJECT_ID:
    description: 'GitLab Project Id for Robocat deployment configuration (e.g.: "2")'
    value:

  PIP_LOCAL_INDEX: ${ARTIFACTORY_URL}/api/pypi/pypi-local

stages:
  - validate
  - test
  - docker image, chart
  - deploy

default:
  tags:
  - us-service

pep8:validate:
  image: ${DOCKER_REGISTRY}/nx/deploy-pod
  stage: validate
  script:
  - pycodestyle --max-line-length=99 .
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"

robocat:test:
  image: ${DOCKER_REGISTRY}/python:3.9
  stage: test
  variables:
    ROBOCAT_DIR: bots/robocat
    PYTHONPATH: .
  script:
  - pip3 install -r $ROBOCAT_DIR/requirements.txt
  - pytest $ROBOCAT_DIR/tests/ --junitxml=./robocat_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: robocat_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - bots/robocat/**/*
    - automation_tools/**/*

workflow_police:test:
  image: ${DOCKER_REGISTRY}/python:3.9
  stage: test
  variables:
    POLICE_DIR: bots/workflow_police
    PYTHONPATH: .
  script:
  - pip3 install -r $POLICE_DIR/requirements.txt
  - pytest $POLICE_DIR/tests/ --junitxml=./police_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: police_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - bots/workflow_police/**/*
    - automation_tools/**/*

source_files_compliance:test:
  image: ${DOCKER_REGISTRY}/python:3.9
  stage: test
  variables:
    PYTHONPATH: .
  script:
  - pip3 install pytest==3.5.0
  - pytest ./nx_source_file_compliance/ --junitxml=./source_files_compliance_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: source_files_compliance_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - nx_source_file_compliance/**/*

# validate helm charts
helm:robocat:validate:
  extends: .validate.helm.chart.template
  variables:
    HELM_CHART_DIR: bots/robocat/chart

helm:workflow_police:validate:
  extends: .validate.helm.chart.template
  variables:
    HELM_CHART_DIR: bots/workflow_police/chart

# build robocat docker image
docker:build:robocat:
  extends: .docker.template
  stage: "docker image, chart"
  tags:
  - primary
  variables:
    DOCKER_DIR: "bots/robocat"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/robocat"
    TARGET_IMAGE_TAG: "$ROBOCAT_VERSION"
    BUILD_OPTIONS: "--build-arg=GIT_COMMIT=$CI_COMMIT_SHORT_SHA"
    USE_GITLAB_REGISTRY: "true"

# build workflow police docker image
docker:build:workflow_police:
  extends: .docker.template
  stage: "docker image, chart"
  tags:
  - primary
  variables:
    DOCKER_DIR: "bots/workflow_police"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/workflow_police"
    TARGET_IMAGE_TAG: "$WORKFLOW_POLICE_VERSION"
    BUILD_OPTIONS: "--build-arg=GIT_COMMIT=$CI_COMMIT_SHORT_SHA"
    USE_GITLAB_REGISTRY: "true"

# Build the open-source checker.
# TODO: Remove when the general repo-checker image is ready.
docker:build:open-source-checker:
  extends: .docker.template
  stage: "docker image, chart"
  variables:
    DOCKER_DIR: "scripts/open_source_check"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "${DOCKER_REGISTRY}/nx/workflow_police/open-source-checker"
  rules:
    - if: !reference [.enable_for_mr_and_protected_ref, if]
      changes:
      - $DOCKER_DIR/**/*
      - nx_source_file_compliance/**/*
      - .gitlab-ci.yml

# build robocat helm chart
helm:build:robcat:
  extends: .helm.chart.template
  stage: "docker image, chart"
  variables:
    HELM_CHART_DIR: "bots/robocat/chart"

# build workflow police helm chart
helm:build:workflow_police:
  extends: .helm.chart.template
  stage: "docker image, chart"
  variables:
    HELM_CHART_DIR: "bots/workflow_police/chart"

# deploy workflow_police
k8s:workflow_police:deploy:
  image: ${DOCKER_REGISTRY}/nx/deploy-pod
  variables:
    DOCKER_DIR: "bots/workflow_police"
    HELM_CHART_DIR: "bots/workflow_police/chart"
    LOG_LEVEL:  "${WORKFLOW_POLICE_LOG_LEVEL}"
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/workflow_police"
    TARGET_IMAGE_TAG: "$WORKFLOW_POLICE_VERSION"
    BOT_GIT_REPO: /dev/nx
  stage: deploy
  tags:
  - primary
  script:
  # ANSIBLE_* variables at https://gitlab.nxvms.dev/admin/application_settings/ci_cd
  # ref: https://docs.ansible.com/ansible/latest/collections/community/hashi_vault/hashi_vault_lookup.html
  - ansible-playbook -i deployment/inventory-master.yml deployment/deployment.yml
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
    changes:
    - $DOCKER_DIR/**/*
    - $HELM_CHART_DIR/**/*
    - automation_tools/**/*
    - deployment/**/*
    - .gitlab-ci.yml

# Deploy form web ui using branch pipeline
k8s:workflow_police:manual:deploy:
  extends: k8s:workflow_police:deploy
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master"

# Robocat deployment template
.k8s:robocat:deploy:
  image: ${DOCKER_REGISTRY}/nx/deploy-pod
  variables:
    DOCKER_DIR: "bots/robocat"
    HELM_CHART_DIR: "bots/robocat/chart"
    LOG_LEVEL:  "${ROBOCAT_LOG_LEVEL}"
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/robocat"
    TARGET_IMAGE_TAG: "$ROBOCAT_VERSION"
  stage: deploy
  tags:
  - primary
  script:
  # ANSIBLE_* variables at https://gitlab.nxvms.dev/admin/application_settings/ci_cd
  # ref: https://docs.ansible.com/ansible/latest/collections/community/hashi_vault/hashi_vault_lookup.html
  - ansible-playbook -i deployment/inventory-master.yml deployment/deployment.yml
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
    changes:
    - $DOCKER_DIR/**/*
    - $HELM_CHART_DIR/**/*
    - automation_tools/**/*
    - deployment/**/*
    - .gitlab-ci.yml

# Deploy robocat for /dev/nx
k8s:robocat-nx:deploy:
  extends: .k8s:robocat:deploy
  variables:
    BOT_GIT_REPO: /dev/nx
    ROBOCAT_GITLAB_PROJECT_ID: 2

# Deploy Robocat for /dev/automation.
k8s:robocat-automation:deploy:
  extends: .k8s:robocat:deploy
  variables:
    BOT_GIT_REPO: /dev/automation
    ROBOCAT_GITLAB_PROJECT_ID: 48

# Deploy Robocat for selected GitLab Project Id/Git repo from web ui using branch pipeline
k8s:robocat:manual:deploy:
  extends: .k8s:robocat:deploy
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master"

# Validate nx_lint package.
pip:validate:nx_lint:version:
  stage: validate
  image: python:3.9-slim-buster
  variables:
    PRODUCT: nx_lint
    PRODUCT_VERSION_FILE: nx_lint/VERSION
  before_script:
  - PRODUCT_VERSION="$(cat ${PRODUCT_VERSION_FILE})"
  script:
  - set +e
  - |
    if pip search --index "${PIP_LOCAL_INDEX}" "${PRODUCT}" | grep "${PRODUCT_VERSION}"; then
      echo -e "\033[0;31m${PRODUCT}==${PRODUCT_VERSION} exists, please, up ${PRODUCT} version!\u001b[0m"
      exit 1
    fi
  - set -e
  rules:
  - if: !reference [.enable_for_mr_and_protected_ref, if]
    changes:
    - nx_lint/**

# Deploy nx_lint package
pip:nx_lint:deploy:
  image: python:3.9-slim-buster
  stage: deploy
  variables:
    PRODUCT: nx_lint
  secrets:
    ARTIFACTORY_PASSWORD:
      vault: infra/artifactory/jenkins@accounts
      file: false
  script:
  - sed -e "s|<ARTIFACTORY_URL>|${ARTIFACTORY_URL}|"
      -e "s|<PASSWORD>|${ARTIFACTORY_PASSWORD}|"
      .pypirc > ${HOME}/.pypirc
  - pip install --upgrade build twine
  - python -m build "${PRODUCT}"/
  - python -m twine upload -r local --non-interactive --config-file ${HOME}/.pypirc "${PRODUCT}"/dist/*
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
    changes:
    - nx_lint/**
    - .gitlab-ci.yml

# Build and deploy the repo-checker image.
docker:build:repo-checker:
  extends: .docker.template
  stage: "docker image, chart"
  variables:
    DOCKER_DIR: "repo_checker_image"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "${DOCKER_REGISTRY}/nx/repo-checker"
    TARGET_IMAGE_TAG: "1.0"
  rules:
    - if: !reference [.enable_for_mr_and_protected_ref, if]
      changes:
      - $DOCKER_DIR/**/*
      - nx_source_file_compliance/**/*
      - nx_lint/**
      - .gitlab-ci.yml
