#
# Build and deploy workflow police & robocat
#
include:
- project: 'dev/ci'
  file: 'pipelines/infra-templates.yml'

.deploy_secrets:
  secrets:
    KUBECONFIG: !reference [.k8s.deploy.template, secrets, KUBECONFIG]
    JIRA_PASSWORD_FILE:
      vault: jira/service@networkoptix.com@apptokens
    SSH_PRIVATE_KEY_FILE:
      vault: gitlab/prod/workflow-robocat-ssh-private-key@apptokens
    GITLAB_API_TOKEN_FILE:
      vault: gitlab/prod/workflow-police-app-token@apptokens

.set_common_k8_values:
  script:
  - 'echo "gitSshKey: |" > ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - 'cat "${SSH_PRIVATE_KEY_FILE}"
      | sed "s/^/  /" >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - 'echo "jiraPassword: $(cat ${JIRA_PASSWORD_FILE})"
     >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - 'echo "repositoryUrl: git@${CI_SERVER_HOST}:dev/nx.git"
     >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - 'echo "gelfServer: ${GRAYLOG_URL}" >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - 'echo "gitlabUrl: ${CI_SERVER_URL}" >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - 'echo "repositoryServer: ${CI_SERVER_HOST}"
     >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - 'echo "gitlabToken: $(cat ${GITLAB_API_TOKEN_FILE})"
       >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'

# Remove pod to apply changes even if helm metadata is unchanged
.stop_k8_containers:
  script:
  - set +o pipefail
  - >
    kubectl scale deployment "${PRODUCT}-${K8S_PRODUCT_RELEASE}"
    --namespace "${K8S_DEPLOY_NAMESPACE}"
    --replicas=0
    |:


variables:
  WORKFLOW_POLICE_VERSION: "1.14"
  ROBOCAT_VERSION: "2.0"
  K8S_PRODUCT_RELEASE: "prod"
  K8S_DEPLOY_NAMESPACE: "workflow-police"
  WORKFLOW_POLICE_LOG_LEVEL:
    description: Workflow police log level
    value:  "INFO"
  ROBOCAT_LOG_LEVEL:
    description: Robocat log level
    value:  "INFO"

stages:
  - validate
  - test
  - docker image, chart
  - deploy

pep8:
  image: nx/deploy-pod
  tags:
  - service
  stage: validate
  script:
  - pycodestyle --max-line-length=99 .
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"

robocat:test:
  image: python:3.8
  stage: test
  tags:
  - service
  variables:
    ROBOCAT_DIR: bots/robocat
    PYTHONPATH: .
  script:
  - pip3 install -r $ROBOCAT_DIR/requirements.txt
  - pytest $ROBOCAT_DIR/tests/ --junitxml=./robocat_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: robocat_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - bots/robocat/**/*
    - automation_tools/**/*

workflow_police:test:
  image: python:3.8
  stage: test
  tags:
  - service
  variables:
    POLICE_DIR: bots/workflow_police
    PYTHONPATH: .
  script:
  - pip3 install -r $POLICE_DIR/requirements.txt
  - pytest $POLICE_DIR/tests/ --junitxml=./police_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: police_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - bots/workflow_police/**/*
    - automation_tools/**/*

source_files_compliance:test:
  image: python:3.8
  stage: test
  tags:
  - service
  variables:
    PYTHONPATH: .
  script:
  - pip3 install pytest==3.5.0
  - pytest ./nx_source_file_compliance/ --junitxml=./source_files_compliance_ut_result.xml
  artifacts:
    when: always
    reports:
      junit: source_files_compliance_ut_result.xml
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - nx_source_file_compliance/**/*

# validate helm charts
helm:robocat:validate:
  extends: .validate.helm.chart.template
  variables:
    HELM_CHART_DIR: bots/robocat/chart

helm:workflow_police:validate:
  extends: .validate.helm.chart.template
  variables:
    HELM_CHART_DIR: bots/workflow_police/chart

# build robocat docker image
docker:build:robocat:
  extends: .docker.template
  stage: "docker image, chart"
  variables:
    DOCKER_DIR: "bots/robocat"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "nx/workflow_police/robocat"
    TARGET_IMAGE_TAG: "$ROBOCAT_VERSION"
    BUILD_OPTIONS: "--build-arg=GIT_COMMIT=$CI_COMMIT_SHORT_SHA"

# build workflow police docker image
docker:build:workflow_police:
  extends: .docker.template
  stage: "docker image, chart"
  variables:
    DOCKER_DIR: "bots/workflow_police"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "nx/workflow_police"
    TARGET_IMAGE_TAG: "$WORKFLOW_POLICE_VERSION"
    BUILD_OPTIONS: "--build-arg=GIT_COMMIT=$CI_COMMIT_SHORT_SHA"

# build open-source checker
docker:build:open-source-checker:
  extends: .docker.template
  stage: "docker image, chart"
  variables:
    DOCKER_DIR: "scripts/open_source_check"
    DOCKER_CONTEXT: ""
    TARGET_IMAGE: "nx/workflow_police/open-source-checker"
  rules:
    - changes:
      - $DOCKER_DIR/**/*
      - nx_source_file_compliance/**/*

# build robocat helm chart
helm:build:robcat:
  extends: .helm.chart.template
  stage: "docker image, chart"
  variables:
    HELM_CHART_DIR: "bots/robocat/chart"

# build workflow police helm chart
helm:build:workflow_police:
  extends: .helm.chart.template
  stage: "docker image, chart"
  variables:
    HELM_CHART_DIR: "bots/workflow_police/chart"

# deploy workflow_police
k8s:workflow_police:deploy:
  extends: .k8s.deploy.template
  variables:
    DOCKER_DIR: "bots/workflow_police"
    HELM_CHART_DIR: "$DOCKER_DIR/chart"
    PRODUCT: "workflow-police"
  secrets: !reference [.deploy_secrets, secrets]
  script:
  - !reference [.set_common_k8_values, script]
  - 'echo "logLevel: ${WORKFLOW_POLICE_LOG_LEVEL}"
       >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - !reference [.stop_k8_containers, script]
  - !reference [.k8s.deploy.template, script]
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
    changes:
    - $DOCKER_DIR/**/*
    - $HELM_CHART_DIR/**/*
    - automation_tools/**/*
    - .gitlab-ci.yml

# Deploy form web ui using branch pipeline
k8s:workflow_police:manual:deploy:
  extends: k8s:workflow_police:deploy
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master"

# deploy robocat
k8s:robocat:deploy:
  extends: .k8s.deploy.template
  variables:
    DOCKER_DIR: "bots/robocat"
    HELM_CHART_DIR: "$DOCKER_DIR/chart"
    PRODUCT: "workflow-police-robocat"
  secrets: !reference [.deploy_secrets, secrets]
  script:
  - !reference [.set_common_k8_values, script]
  - 'echo "logLevel: ${ROBOCAT_LOG_LEVEL}"
       >> ${HELM_CHART_DIR}/values-${K8S_PRODUCT_RELEASE}.yaml'
  - !reference [.stop_k8_containers, script]
  - !reference [.k8s.deploy.template, script]
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
    changes:
    - $DOCKER_DIR/**/*
    - $HELM_CHART_DIR/**/*
    - automation_tools/**/*
    - .gitlab-ci.yml

# Deploy form web ui using branch pipeline
k8s:robocat:manual:deploy:
  extends: k8s:robocat:deploy
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master"
