## Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

import base64
from dataclasses import dataclass, field
from typing import Dict

GOOD_README_RAW_DATA = """# Nx Meta VMP Open Source Components

// Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

---------------------------------------------------------------------------------------------------
"""

BAD_README_RAW_DATA = """# Nx Meta VMP Open Source Components

// Copyrleft 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

-shit fuck blya------------------------------------------------------------------------------------
"""

BAD_README_RAW_DATA_2 = """# Nx Meta VMP Open Source Components

// Copyrleft 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

-shit fuck blya------------------------------------------------------------------------------------

-hanwha
"""

BAD_CMAKELISTS_RAW_DATA = """## Copyrleft 2018-present Network Optix, Inc.

# shit fuck blya
"""

GOOD_CPP_RAW_DATA = """// Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

#include <stdio>
"""  # noqa

NX_SUBMODULE_GOOD_RAW_DATA = """# This file is autogenerated.
subrepo-url=repo1
subrepo-dir=1
commit-sha=abcdef
"""

NX_SUBMODULE_BAD_RAW_DATA_1 = """# This file is autogenerated.
subrepo-url=repo_unexistent
subrepo-dir=1
commit-sha=abcdef
"""

NX_SUBMODULE_BAD_RAW_DATA_2 = """# This file is autogenerated.
subrepo-url=repo1
subrepo-dir=1
commit-sha=fedcba
"""

NX_SUBMODULE_BAD_RAW_DATA_3 = """# This file is autogenerated.
subrepo-url=repo1
subrepo-dir=nonexistent
commit-sha=abcdef
"""


@dataclass
class ProjectFileMock:
    path: str = "foobar"
    ref: str = "11"
    raw_data: str = b"Some data"

    def decode(self):
        return self.raw_data.encode('utf-8')

    @property
    def content(self):
        return base64.b64encode(self.raw_data)


@dataclass
class FileManagerMock():
    commit_files: Dict[str, ProjectFileMock] = field(default_factory=dict)

    def add_mock_file(self, ref: str, path: str, data: str):
        commit_files = self.commit_files.setdefault(ref, dict())
        commit_files[path] = ProjectFileMock(path=path, raw_data=data, ref=ref)

    def get(self, file_path, ref):
        commit_files = self.commit_files[str(ref)]
        return commit_files[file_path]
